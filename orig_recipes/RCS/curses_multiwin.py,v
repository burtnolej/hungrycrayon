head	1.8;
access;
symbols;
locks
	burtnolej:1.8; strict;
comment	@# @;


1.8
date	2013.07.26.17.06.03;	author burtnolej;	state Exp;
branches;
next	1.7;

1.7
date	2013.07.26.14.25.45;	author burtnolej;	state Exp;
branches;
next	1.6;

1.6
date	2013.07.25.05.47.13;	author burtnolej;	state Exp;
branches;
next	1.5;

1.5
date	2013.07.21.13.43.09;	author burtnolej;	state Exp;
branches;
next	1.4;

1.4
date	2013.07.20.21.28.04;	author burtnolej;	state Exp;
branches;
next	1.3;

1.3
date	2013.07.20.06.40.24;	author burtnolej;	state Exp;
branches;
next	1.2;

1.2
date	2013.07.19.06.39.03;	author burtnolej;	state Exp;
branches;
next	1.1;

1.1
date	2013.07.19.06.19.08;	author burtnolej;	state Exp;
branches;
next	;


desc
@@


1.8
log
@fixed bug that was causing deadlock when focus went to the EntryBox
@
text
@#!/usr/bin/python

from sys import path
path.append("/Users/burtnolej/Dev/pythonapps/util")
from misc_util import Singleton, get_time_hms, in_method_log, Logger
import curses
from collections import OrderedDict
import time
import threading

lock = threading.Lock()
logger = Logger("/tmp/log.txt")
    
def _lock(func):
    def _tmp(*args, **kw):
        with lock:
            func(*args, **kw)
    return _tmp

class Window(threading.Thread):
#class Window(object):

    _debug = False
    _debug_win = None

    def __init__(self,wm,name,sy,sx,y,x,content=None,debug=False):
        '''
        args:
        sy = size of y axis (height)
        sx = size of x axis (width)
        y = begin y coord (origin)
        x = begin x coord (origin)
        focus = boolean, true to force the cursor to this win otherwise first win
        content is a list of any initial content you want to see
        '''
        assert isinstance(content,list) or content==None
        assert int(sy)

        threading.Thread.__init__(self)
                
        self._contents = []
        self._contents_top = None # index to content that represents  whats visible on the screen
        self._contents_bottom = None
        self._content_selection_idx = 0
        self._oy = 1
        self._ox = 1
        self._sy = sy -2 # (take off 2 for the borders)
        self._sx = sx -2 # (take off 2 for the borders)
       
        self._name = name
        self._win_ref = curses.newwin(sy,sx,y,x)
        self.draw_name(y,x)
                
        self._win_ref.border()
        self._win_ref.keypad(1)
        
        self.set_focus_origin()
        self.refresh()

        if content != None:
            self._contents = content
            self.draw_content(0)
            self._contents_len = len(self._contents)
        if debug:
            Window._debug = True
            Window._debug_win = self

        wm.add_win(self) #register with the wm

    def run(self):
        while 1:
            time.sleep(1)

    @@in_method_log(logger)
    def draw_name(self,y,x):
        win = curses.newwin(3,self._sx+2,y-2,x) # add 2 back on for borders
        win.border()
        win.addstr(1,2,self._name)
        win.refresh()

    #def get_win(sy,sx,y,x):
    #    win = curses.newwin(3,self._sx+2,y-2,x) # add 2 back on for borders

    @@in_method_log(logger)
    def set_focus_origin(self):
        '''
        to be overriden for subclass that want different behaviour
        ie list will want to change attribute to highight new focussed element
        '''
        self._win_ref.move(self._oy,self._ox)

    @@in_method_log(logger)
    def set_focus_bottom(self):
        '''
        as set focus origin
        '''
        self._win_ref.move(self._oy+self._sy,self._ox+self._sx)

    @@in_method_log(logger)
    def event_handler(self,event):
        '''
        to be over-ridden as specific to function of window
        '''
        pass

    @@in_method_log(logger)
    def onclick_handler():
        pass

    @@in_method_log(logger)
    def blank_content(self):
        for i in range(self._oy,self._sy+1):
                self.addstr_yx(i,self._ox,"          ")
                self.move(i,self._ox)
        self.set_focus_origin()

    def draw_content(self,start,cursor_bottom=False):
        '''
        args:
        start is where in _contents we should draw from if start == 0 then its the start
        cursor_bottom is to force focus element to be the bottom not the top (default)
        '''
        self.set_focus_origin() # make sure at origin
        self.blank_content()
        
        end = start+self._sy
        if end > len(self._contents):
            end = len(self._contents)
            
        for i in range(start,end):
                self.addstr_yx(self._y,self._ox,self._contents[i])
                self.move(self._y+1,self._ox)
                
        ###
        ### need to eliminate local _y _x and find a way
        ### to always call getxy
        ###                   
        self._contents_bottom = start+ self._sy
        if cursor_bottom:
                self.set_focus_bottom()
                
        else:
                self.set_focus_origin()

    @@in_method_log(logger)
    def addstr_yx(self,y,x,text,attr=None):
        with lock:
            self._win_ref.addstr(y,x,text) # rewrite with new attr

    @@in_method_log(logger)
    def addstr(self,text):
        self.addstr_yx(self._y,self._x,text) # rewrite with new attr
        
    @@property
    def _y(self):
        y,_ = self._win_ref.getyx()
        return(y) 

    @@property
    def _x(self):
        _,x = self._win_ref.getyx()
        return(x)

    @@property
    def _content_selection(self):
        return(self._contents[self._content_selection_idx])

    def get_yx(self):
        return(self._y,self._x)

    @@in_method_log(logger)
    def delch(self,y,x):
        self._win_ref.delch(y,x)

    @@in_method_log(logger)
    def move(self,y,x):
        with lock:
            self._win_ref.move(y,x)

    @@in_method_log(logger)
    def refresh(self):
        #with lock:
        self._win_ref.refresh()

    @@in_method_log(logger)
    def getch(self):
        win_ref = self._win_ref
        return(win_ref.getch())

    def addstr_no_cursor(self,attr,y,x,width,win=None):
        '''
        write a string to a specific without moving the cursor
        useful for debug statements
        args:
        width is the number of chars expected so can blank out before each write
        win is set if the attr to print id not of parent object
        '''
        if win:
            text = str(getattr(win,attr))
            text = text.rjust(width+ 1) + " " + attr.ljust(30) + win._name
        else:
            text = str(getattr(self,attr))
            text = text.rjust(width+ 1) + " " + attr.ljust(30) + self._name
        
        cy, cx = self.get_yx() # get current pos of cursor
        self.addstr_yx(y,x,"".ljust(width))
        self.addstr_yx(y,x,text)
        self.move(cy,cx)


class ListBox(Window):

    def __init__(self,*args):
        super(ListBox,self).__init__(*args)
        
        if super(ListBox,self)._debug:
        #    super(ListBox,self)._debug_win.register("_content_selection_idx",8,self)            
        #    super(ListBox,self)._debug_win.register("_content_selection_idx",8,self)
            super(ListBox,self)._debug_win.register("_y",8,self)
            super(ListBox,self)._debug_win.register("_sy",8,self)
        #    super(ListBox,self)._debug_win.register("_content_selection",8,self)
        
        self.refresh()
        
    
    def set_row_attribute(self,screen,y,x,attr):
        text_at_row = screen.instr(y,1,self._sx) # get row text
        screen.addstr(y,1,text_at_row,attr) # rewrite with new attr
        screen.move(y,x) # return cursor to origin

    def set_focus_origin(self):
        '''
        to be overriden for subclass that want different behaviour
        ie list will want to change attribute to highight new focussed element
        '''
        self._win_ref.move(self._oy,self._ox)
        self.set_row_attribute(self._win_ref,self._oy,self._ox,curses.A_REVERSE)

    def set_focus_bottom(self):
        '''
        as set focus origin
        '''
        self._win_ref.move(self._oy+self._sy-1,self._ox+self._sx)
        self.set_row_attribute(self._win_ref,self._oy+self._sy-1,self._ox,curses.A_REVERSE)

    def event_handler(self,event):
        
        y, x = self.get_yx() # get current pos of cursor
        
        if event == curses.KEY_LEFT:
            if x>0:
                self._win_ref.move(y,x-1)
        elif event == curses.KEY_RIGHT:
            if x<curses.COLS-1:
                self._win_ref.move(y,x+1)
        elif event == curses.KEY_UP:
            if self._content_selection_idx == 0: # first element in content list
                self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL)
                new_top = (len(self._contents)//self._sy) * self._sy # calculate top of last list content ( that contains the last element)
                self._content_selection_idx = new_top
                self.draw_content(new_top)
            elif y == 1: # highest visible element
                self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL)
                self.draw_content(self._content_selection_idx - self._sy,True)
                self._content_selection_idx -= 1 
            else:  # just move
                self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL)
                self.set_row_attribute(self._win_ref,y-1,x,curses.A_REVERSE)
                self._content_selection_idx -= 1
        elif event == curses.KEY_DOWN:
            if self._content_selection_idx == len(self._contents)-1: # last element in content list
                self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL)
                self._content_selection_idx = 0
                self.draw_content(0)
            elif y == self._sy: # lowest visible element
                self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL)
                self._content_selection_idx = self._contents_bottom
                self.draw_content(self._content_selection_idx)
            else: # just move 
                self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL)
                self.set_row_attribute(self._win_ref,y+1,x,curses.A_REVERSE)
                self._content_selection_idx += 1
        elif event == 4: # CTRL-d
            self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL)
            if self._contents_bottom -1 < len(self._contents):
                self._content_selection_idx = self._contents_bottom - 1
                self.draw_content(self._content_selection_idx-1)
            else:
                self._content_selection_idx = 0
                self.draw_content(self._content_selection_idx)
        elif event == 21: # CTRL-u
            pass
        elif event == 10:
            text_at_row = self._win_ref.instr(y,0,curses.COLS) # get string at xy
        else:
            return(False)
        
        return(True)

class DebugBox(Window):

    def __init__(self,*args):
        super(DebugBox,self).__init__(*args)
        self.attr_list = OrderedDict()
        self.next_free = 1


    def register(self,text,width,win):
        '''
        store details of watch in an ordered dict of tuples
        dict1{"attr"+win} = attr, win_ref, width, index
        index = order on the screen (y coord)
        '''
        if not self.attr_list.has_key(text + str(win)):
            self.attr_list.__setitem__(text + str(win),(text,win,width,self.next_free))
            self.next_free += 1
        else:
            pass
            #raise Exception # nothing should try to register twice

    def run(self):

        while 1:
            for key in self.attr_list.keys():
                text,win,width,index = self.attr_list.__getitem__(key)
            
                self.addstr_no_cursor(text,index,1,width,win)
            time.sleep(1)
            self.refresh()
            
class TextBox(Window):

    def __init__(self,*args):
        super(TextBox,self).__init__(*args)
    
        if super(TextBox,self)._debug:
            super(TextBox,self)._debug_win.register("_y",8,self)
            super(TextBox,self)._debug_win.register("_x",8,self)


    def run(self):
        while 1:
            self.addstr_yx(1,1,get_time_hms())
            #with lock:
            self.refresh()
            time.sleep(1)
            #self.addstr('x')
            #pass
        
class EntryBox(Window):

    def __init__(self,*args):
        super(EntryBox,self).__init__(*args)
    
        if super(EntryBox,self)._debug:
            super(EntryBox,self)._debug_win.register("_y",8,self)
            super(EntryBox,self)._debug_win.register("_x",8,self)

    def event_handler(self,event):
        if event == 263: # delete
            if self._x >0:
                self.delch(self._y,self._x-1)
        elif event == curses.KEY_LEFT:
            if self._x>0:
                self.move(self._y,self._x-1)
        elif event == curses.KEY_RIGHT:
            if self._x<curses.COLS-1:
                self.move(self._y,self._x+1)
        elif event == curses.KEY_UP:
            pass
        elif event == curses.KEY_DOWN:
            pass
        elif event == 10:
            pass
        else:
            self.addstr(chr(event))

    def run(self):
        while 1:
            time.sleep(1)



    
class WindowManager():
    __metaclass__ = Singleton
    '''
    rudimentary window manager
    '''
    def __init__(self):
        '''
        '''
        self._wins = [] # refs to all the windows init'd
        self._focus = 0 # index of _wins containing current focus

    def add_win(self,win_ref,focus=False):
        '''
        add a win to be handled by the manager
        '''
        self._wins.append(win_ref)
        if focus:
            self_focus = len(self._wins)-1

    def get_win_ref(self,index=None):
        '''
        get ref of win in focus or ref of win index
        '''
        assert len(self._wins) > 0
         
        if index==None:
            return(self._wins[self._focus])
        else:
            self._focus = index
        return(self._wins[index])

    @@in_method_log(logger)
    def get_next_win_ref(self):
        if (self._focus + 1) < len(self._wins): # if one more left
            self._focus += 1
        else:
            self._focus = 0
        return(self.get_win_ref(self._focus))

    def event_handler(self,event):
        '''
        needs to be the first event handler always called and then
        throw to the window in focus if keypress not handled here
        '''        
        if event == 9: # tab is the key to switch window focus
            focus_win = self.get_next_win_ref()
            focus_win.refresh
            return(True)
        elif event == ord("q"):
            exit()
        return(False)

    def mainloop(self):
        while True:
            focus_win = self.get_win_ref()
            focus_win.refresh()
            event = focus_win.getch()
            if not focus_win.event_handler(event):
                self.event_handler(event)

def file2list(filename):
    l=[]
    fh = open(filename, 'r+')
    return [line.rstrip() for line in fh]
 
    
def main(screen):

    l = file2list("./list.txt")
    
    screen.keypad(1)
    curses.mousemask(1)

    wm = WindowManager()
    db = DebugBox(wm,"db1",10,50,26,5,None,True)
    db.daemon = True
    db.start()
    db.name = "db1"
    
    lb = ListBox(wm,"lb1",15,50,8,5,l)
    lb.daemon = True
    lb.start()
    lb.name = "lb1"
    
    lb2 = ListBox(wm,"lb2",15,50,8,60,l)
    lb2.daemon = True
    lb2.start()
    lb2.name = "lb2"

    eb = EntryBox(wm,"eb1",3,50,2,5,None)
    eb.daemon = True
    eb.start()
    eb.name = "eb1"
    
    tb = TextBox(wm,"tb1",3,50,39,5,None)
    tb.daemon = True
    tb.start()
    tb.name = "tb1"
    
    wm.mainloop()

if __name__ == '__main__':
    try:
        curses.wrapper(main)
    except KeyboardInterrupt:
        print "Got KeyboardInterrupt exception. Exiting..."
        exit()

    
@


1.7
log
@added log handle arg to in_method_log
still have bug where entry box hangs everything when it trys to write to the screen
@
text
@d152 1
a152 2
        with lock:
            self.addstr_yx(self._y,self._x,text) # rewrite with new attr
d182 2
a183 2
        with lock:
            self._win_ref.refresh()
a483 1
    
@


1.6
log
@entry and list work
debug does not display as needs threads to be  enabled
@
text
@d5 1
a5 1
from misc_util import Singleton
d12 7
d20 2
a21 2
#class Window(threading.Thread):
class Window(object):
d38 3
a40 1
        
a68 1
        #threading.Thread.__init__(self)
d70 5
d81 4
d92 1
d98 2
a99 1
    
d106 1
d110 1
d113 1
a113 1
                self.addstr("          ",i,self._ox)
d116 1
a116 1
                
d131 1
a131 1
                self.addstr(self._contents[i],self._y,self._ox)
d145 9
a153 12
    #def move()
    #        self._win_ref.move()
    
    def addstr(self,text,y=None,x=None,attr=None):
        win_ref = self._win_ref
        if y==None and x==None:
            #with lock:
                self._win_ref.addstr(self._y,self._x,text) # rewrite with new attr
        else:
            #with lock:
                self._win_ref.addstr(y,x,text) # rewrite with new attr
        return(self._y,self._x)
d168 1
a168 1
               
d172 1
d175 2
a176 1
        
d178 4
a181 2
        self._win_ref.move(y,x)
                
d183 2
a184 2
        win_ref = self._win_ref
        win_ref.refresh()
d186 1
d207 2
a208 2
        self.addstr("".ljust(width),y,x)
        self.addstr(text,y,x)
d218 2
a219 4
            super(ListBox,self)._debug_win.register("_content_selection_idx",8,self)
            
            super(ListBox,self)._debug_win.register("_content_selection_idx",8,self)
            super(ListBox,self)._debug_win.register("_contents_bottom",8,self)
a220 1
            super(ListBox,self)._debug_win.register("_contents_len",8,self)
d222 1
a222 1
            super(ListBox,self)._debug_win.register("_content_selection",8,self)
d329 1
a329 1
            time.sleep(2)
d332 18
d379 4
d417 1
d460 15
a474 4
    db = DebugBox(wm,"db1",10,50,31,5,None,True)
    #db.start()
    lb = ListBox(wm,"lb1",20,50,8,5,l)
    #lb.start()
d476 9
a484 2
    #eb.start()

@


1.5
log
@no material changes that i can rememeber
@
text
@d7 3
d11 3
d60 1
d124 2
d130 2
a131 1
            self._win_ref.addstr(self._y,self._x,text) # rewrite with new attr
d133 2
a134 1
            self._win_ref.addstr(y,x,text) # rewrite with new attr
d190 16
a276 1
            print event
a277 11

        # debuggin
        if super(ListBox,self)._debug:
            super(ListBox,self)._debug_win.register("_content_selection_idx",8,self)
            
            super(ListBox,self)._debug_win.register("_content_selection_idx",8,self)
            super(ListBox,self)._debug_win.register("_contents_bottom",8,self)
            super(ListBox,self)._debug_win.register("_y",8,self)
            super(ListBox,self)._debug_win.register("_contents_len",8,self)
            super(ListBox,self)._debug_win.register("_sy",8,self)
            super(ListBox,self)._debug_win.register("_content_selection",8,self)
a278 2
            self.refresh()

d285 1
a285 1
        self.attr_list = {}
d288 1
d290 8
a297 2
        if self.attr_list.has_key(text + str(win)):
            self.addstr_no_cursor(text,self.attr_list.__getitem__(text + str(win)),1,width,win)
d299 4
a302 3
            self.attr_list.__setitem__(text + str(win),self.next_free)
            self.addstr_no_cursor(text,self.next_free,1,width,win)
            self.next_free += 1
d304 8
a311 1
        self.refresh()
d315 7
a340 4
        # debuggin
        if super(EntryBox,self)._debug:
            super(EntryBox,self)._debug_win.register("_y",8,self)
            super(EntryBox,self)._debug_win.register("_x",8,self)
d417 8
a424 3
    ListBox(wm,"lb1",20,50,8,5,l)
    EntryBox(wm,"eb1",3,50,2,5,None)
    DebugBox(wm,"db1",10,50,31,5,None,True)
@


1.4
log
@added func to handle a separate debug win that all wins can register watches on
at the moment has to be called each time key is pressed and this can be changed when we add threads

fixed bug on scroll up list box where focus went into border
@
text
@d42 1
d44 1
a44 1
        self.set_focus_origin()
d74 1
a74 1
    def event_handler():
d142 3
d289 2
a290 2
            if x>0:
                win.delch(y,x-1)
d292 2
a293 2
            if x>0:
                win.move(y,x-1)
d295 2
a296 2
            if x<curses.COLS-1:
                win.move(y,x+1)
d304 7
a310 1
            win.addstr(chr(event),1)
d386 3
a388 3
    ListBox(wm,"lb1",20,50,2,5,l)
    #ListBox(wm,27,20,2,30,l)
    DebugBox(wm,"db1",10,50,25,5,None,True)
@


1.3
log
@added scroll up to listbox when not top of contents

need to add something to draw that allows focus to be bottom of new draw not top of new drawn content
@
text
@d9 5
a13 1
    def __init__(self,wm,sy,sx,y,x,content=None):
a22 1

a31 1
        self._win_ref = curses.newwin(sy,sx,y,x)
d34 5
d41 1
d43 1
a43 1
        self.set_cursor_origin()
d48 4
a51 1
            
d54 19
d86 1
a86 1
        self.set_cursor_origin()
d88 1
a88 1
    def draw_content(self,start):
d90 3
a92 2
        start is where in _contents we should draw from
        if start == 0 then its the start
d94 1
a94 1
        self.set_cursor_origin() # make sure at origin
d110 5
a114 1
        self.set_cursor_origin()
d153 1
a153 5
    def set_cursor_origin(self):
        self._win_ref.move(self._oy,self._ox)
        self.set_row_attribute(self._win_ref,self._oy,self._ox,curses.A_REVERSE)

    def addstr_no_cursor(self,attr,y,x,width):
d159 1
d161 7
a167 2
        text = str(getattr(self,attr))
        text = text.rjust(width+ 1) + " " + attr
d181 15
d214 2
a215 2
                self._content_selection_idx = self._content_selection_idx - self._sy
                self.draw_content(self._content_selection_idx)
d249 10
a258 7
        # testing        
        self.addstr_no_cursor("_content_selection_idx",1,15,8)
        self.addstr_no_cursor("_contents_bottom",2,15,8)
        self.addstr_no_cursor("_y",3,15,8)
        self.addstr_no_cursor("_contents_len",4,15,8)
        self.addstr_no_cursor("_sy",5,15,8)
        self.addstr_no_cursor("_content_selection",6,15,8)
d260 1
a260 1
        self.refresh()
d264 17
d376 1
a376 3
    ListBox(wm,20,50,2,5,l)
    
    
d378 1
@


1.2
log
@added func to handle mouse up in listbox for the content_selection = 0 edge case and the standard just move up case

still need to handle top of visible but not content_selection = 0
@
text
@d157 2
a158 1
                new_top = (len(self._contents)//self._sy) * self._sy # calculate top of last list content ( that contains the last element) 
d160 5
a164 2
                self._content_selection_idx = new_top
            if y>1:
a167 1
                
d170 2
a171 1
                self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL) 
d173 5
a177 2
                self._content_selection_idx = 0
            elif y<self._sy: # lowest visible element
a179 5
                self._content_selection_idx = self._contents_bottom - self._sy + y
            else: # just move
                self.set_row_attribute(self._win_ref,y,x,curses.A_NORMAL)
                self.draw_content(self._contents_bottom-1)
                #self._content_selection_idx = self._contents_bottom - self._sy
a183 1
                self.draw_content(self._contents_bottom-1)
d185 1
a186 1
                self.draw_content(0)
d188 1
d304 1
a304 1
    ListBox(wm,35,50,2,5,l)
@


1.1
log
@Initial revision
@
text
@d155 5
d163 2
d177 2
a178 1
                self._content_selection_idx = self._contents_bottom - self._sy
@
