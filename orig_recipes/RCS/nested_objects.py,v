head	1.10;
access;
symbols;
locks
	burtnolej:1.10; strict;
comment	@# @;


1.10
date	2013.07.07.06.05.09;	author burtnolej;	state Exp;
branches;
next	1.9;

1.9
date	2013.07.06.21.34.39;	author burtnolej;	state Exp;
branches;
next	1.8;

1.8
date	2013.07.06.20.28.17;	author burtnolej;	state Exp;
branches;
next	1.7;

1.7
date	2013.07.06.19.38.56;	author burtnolej;	state Exp;
branches;
next	1.6;

1.6
date	2013.07.05.11.54.16;	author burtnolej;	state Exp;
branches;
next	1.5;

1.5
date	2013.07.04.11.19.36;	author burtnolej;	state Exp;
branches;
next	1.4;

1.4
date	2013.07.03.20.26.24;	author burtnolej;	state Exp;
branches;
next	1.3;

1.3
date	2013.07.03.06.05.57;	author burtnolej;	state Exp;
branches;
next	1.2;

1.2
date	2013.07.03.05.18.12;	author burtnolej;	state Exp;
branches;
next	1.1;

1.1
date	2013.07.03.04.38.35;	author burtnolej;	state Exp;
branches;
next	;


desc
@@


1.10
log
@moved derived Table class (SimpleTable) definition into table_print module so everyone can use it
@
text
@#!/usr/bin/python

import inspect
from sys import path
path.append("/Users/burtnolej/Dev/pythonapps/util")
from table_print import SimpleTable
from types import InstanceType
from misc_util import Logger

class XYZ():
    pass
class Node(object):
    object_count=0
    def __init__(self,depth,width,count):
        Node.object_count+=1
        print "".ljust(depth*5),depth,width,count,self

        if depth > 1:
            return

        self.depth = depth
        self.width = width
        self.parent = self
        self.children = []
        #self.mixed_list = ['a',1,Node,['b',2,XYZ()]]
        self.mixed_list = ['a',1,Node]
        
        depth = self.depth+1
        for width in range(0,2):
            # make sure we call the sub class contructor
            obj = self.__class__(depth,width,Node.object_count)
            self.children.append(obj)

class MyNode(Node):
    def __init__(self,depth,width,count):
            super(MyNode,self).__init__(depth,width,count)
            self.node_count = count            
    
class MyClass():
    def __init__(self):
        self.attr1 = "a"
        self.attr2 = 1
        
if __name__ == '__main__':
    #logger = Logger()

    node = MyNode(0,0,0)
    #for i in range(0,10):
    #    print "run:",i
    #    deep_pretty_print_object(anobject)

    l = ['a','b',{'c':3,'d':4,'e':['x','y','z',MyClass()]}]
    #MyTable(node,"").deep_print()
    #MyTable(l,"").deep_print()
    #t = MyTable(l,"")

    SimpleTable(l,"").deep_print()

    #del logger
@


1.9
log
@updated _cell_generator to handle TypeDict properly
@
text
@d6 1
a6 1
from table_print import Table
a38 30
class MyTable(Table):

    def __init__(self,object,prefix):
        '''
        can overide any config variables after super constructor called
        '''
        super(MyTable,self).__init__(object)
        self._prefix = prefix
        
    def _cell_generator(self,object):
        column_titles = ["name","value","o"]
        yield column_titles
        if isinstance(object,list):
            for i in range(0,len(object)):
                yield i,object[i],"?"
        elif isinstance(object,dict):
            for name,value in object.iteritems():
                yield name,value,"?"
        else:
            for name,value in inspect.getmembers(object):
                if name[-2:] != "__":
                    if isinstance(getattr(object,name),InstanceType):
                        yield [name,value,"Y"]
                    elif isinstance(getattr(object,name),list):
                        if len(getattr(object,name)) > 0:
                            if isinstance(getattr(object,name)[0],type(getattr(object,name)[0])):
                                yield [name,value,"Y"]
                    else:
                        yield [name,value,"N"]

d52 1
a52 1
    l = ['a','b',{'c':3,'d':4}]
d55 1
a55 1
    t = MyTable(l,"")
d57 1
a57 1
    MyTable(t,"").deep_print()
@


1.8
log
@modified _cell_generator to handle been given a list or an object
@
text
@d54 3
d63 3
a65 2
                        if isinstance(getattr(object,name)[0],type(getattr(object,name)[0])):
                            yield [name,value,"Y"]
d75 1
a75 1
    logger = Logger()
d82 1
a82 1
    l = ['a','b',node]
d84 2
a85 1
    MyTable(l,"").deep_print()
d87 3
a89 1
    del logger
@


1.7
log
@works with table_print 1.6
works with lists as members. not lists of lists
@
text
@d51 7
a57 6
        for name,value in inspect.getmembers(object):
            if name[-2:] != "__":
                if isinstance(getattr(object,name),InstanceType):
                    yield [name,value,"Y"]
                elif isinstance(getattr(object,name),list):
                    if isinstance(getattr(object,name)[0],type(getattr(object,name)[0])):
d59 11
a69 3
                else:
                    yield [name,value,"N"]
                              
d77 4
a80 1
    MyTable(node,"").deep_print()
@


1.6
log
@commented out mixed list
@
text
@d10 2
d25 2
a26 1
        #self.mixed_list = ['a',1,Node]
@


1.5
log
@modified to use new Table with deep_print added as member method of Table
@
text
@d23 2
@


1.4
log
@fixed all known bugs
works as expected.
@
text
@d10 1
a10 1
class AnObject():
d13 1
a13 1
        AnObject.object_count+=1
d25 2
a26 1
            obj = AnObject(depth,width,AnObject.object_count)
d29 5
a54 41

dirty_object=[]

def deep_pretty_print_object(object,depth=0,max_depth=10):
    '''
    function to print out any member attributes that are objects
    themselves. traverses the tree until hits the bottom
    global dirty_object or hits max_depth
    '''
    global dirty_object

    # special case as only chidren get actually printed by recursion
    if depth==0:
        dirty_object = []
        MyTable(object,str(depth)+"".ljust(depth*4," ")).printout()
        # avoid getting stuck in infinte loops for linked lists
        dirty_object.append(object)
    elif depth >= max_depth:
        return
    
    depth+=1
    for name, value in inspect.getmembers(object):
        # is the member an object
        if isinstance(getattr(object,name),InstanceType):
            if value not in dirty_object:

                MyTable(value,str(depth)+"".ljust(depth*4," ")).printout()
                dirty_object.append(value)
                deep_pretty_print_object(value,depth,max_depth)
                      
        elif isinstance(getattr(object,name),list):
            # is the first item on the list an object
            # we assume that all items in list are same type
            if isinstance(getattr(object,name)[0],type(getattr(object,name)[0])):
                for value in getattr(object,name):
                    # search to see if value is in the dirty list
                    if value not in dirty_object:
                        MyTable(value,str(depth)+"".ljust(depth*4," ")).printout()
                        dirty_object.append(value)
                        deep_pretty_print_object(value,depth,max_depth)
                        
d59 5
a63 4
    anobject = AnObject(0,0,0)
    for i in range(0,10):
        print "run:",i
        deep_pretty_print_object(anobject)
@


1.3
log
@found a bug that if you run multiple times we are not reseting the dirty cache have added some code to debug.
need to add option right to log file not screen
also need to figure out how to get the pause at bottom of the screen thing when running the nesting function
@
text
@d8 1
d30 1
a30 1
    def __init__(self,object):
d35 1
a35 1
        #self._pad_char = "*"
d51 7
a57 1
def deep_pretty_print_object(object):
d60 10
d71 1
d74 2
d77 2
a78 5
                deep_pretty_print_object(value)
                MyTable(object).printout()
            else:
                print "dirty:",value
                
d80 2
d86 1
d88 1
a88 4
                        deep_pretty_print_object(value)
                        MyTable(object).printout()
                    else:
                        print "dirty:",value
d90 1
d92 2
d98 2
@


1.2
log
@put the _cell_generator definition a as class method
expicitly calling the super class constructor from the subclass and then user can overide any config by specifying in subclass constructor
@
text
@d15 1
a15 1
        if depth > 3:
d34 1
a34 1
        self._pad_char = "*"
d59 3
d70 2
d75 3
a77 1
    deep_pretty_print_object(anobject)
@


1.1
log
@Initial revision
@
text
@d27 1
d29 8
a36 2
def cell_generator(object):
    def get_object_directory():
a47 11
    return(get_object_directory)

def pretty_print_object(object):
    table = Table(_max_column_width=50,
                  _max_cell_depth=10,
                  _pad_char=" ",
                  _table_pad_char="_",
                  _spacer=" |",
                  _seed=object,
                  _cell_generator=cell_generator(object))
    table.printout()
d58 1
a58 1
                pretty_print_object(value)
d66 1
a66 1
                        pretty_print_object(value)
a69 2
    #xpretty_print_object(anobject)

@
